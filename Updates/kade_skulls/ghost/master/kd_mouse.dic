//---------------------------Mouse Functions--------------------------
//As you've probably guessed, this .dic file has to do with mouse functions. This includes the petting feature and what happens when you double click your ghost.
//As a note, this .dic file isn't strictly necessary - I'm pretty sure you can just clear the file and it won't hurt your ghost any, it'll just make it so you can't pet or double click them. And if you're interested in only petting or double clicking one character, all you have to do is delete the chunks of code for the other character you want to be uninvolved. However, I'm assuming most people making ghosts want to make their ghosts pettable and clickable, so this will cover the messages for both.

//Make sure to read the walkthrough page (http://www.ashido.com/ukagaka/walkthrough.html) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!


//--OnMouseMove
//This is a bunch of code determining who the mouse is over. Don't touch any of it.

OnMouseMove
 {
		//---- reference3 determines the character in question
		if reference3 == 0 //if the character is 0, aka the main character
		{
			//---- it will run the mouse functions for that character
			MouseMoveSakura
		}
		else //if the character isn't 0, then it must be the side character.
		{
			//---- this will run the mouse functions for the side character.
			MouseMoveKero
		}
 }
 
//stroke is an array here, to save on variables. stroke[0] is the original stroke value, which resets after every successful pet. stroke[1] is the continuous stroking. It's the same as stroke[0], but it does not reset until your mouse leaves the character. stroke[2] is the number of successful pets in a row. I haven't used it here but you can if you want.
MouseMoveSakura
 {
	if reference4 == "Head"
	{
		stroke[0]++ //Stroke value only goes up when over the appropriate areas
		stroke[1]++
		
		if stroke[1] >= 160 //this would happen starting at 4 pets
		{
			//if stroke[0] >= 160 //Stroke count is longer so that you have time to read the dialogue here. Adjust as you like.
			//{
				//stroke[0] = 0
				//stroke[2]++
				//totalpets++
				
				//"\0\s[0]This is dialogue for petting me continuously!\w8\w8 You're on a %(stroke[2]) pet streak!\e"
			//}
		}
		elseif stroke[0] >= 40
		{
			stroke[0] = 0 //Stroke value is reset
			stroke[2]++
			totalpets++
			
			"\0\s[0]You've found some petting dialogue.\e"
			"\0\s[0]You've found more petting dialogue.\e"
			"\0\s[0]You've found another bit of petting dialogue.\e"
 		}
 	}
	elseif reference4 == "Face"
	{
		stroke[0]++
		
		if stroke[0] >= 40
		{
			stroke[0] = 0
			"\0\s[1]That's my face.\e"
		}
	}
	elseif reference4 == "HandR" || reference4 == "HandL" //Another area set up by the collisions in surfaces.txt. You can expand this list with as many elseifs as you need depending on how many collisions you've set up.
 	{
		stroke[0]++
		
		if stroke[0] >= 40
		{
			stroke[0] = 0
			"\0\s[1]That's my hand.\e"
		}
 	}
	elseif reference4 == "Hat" //Another area set up by the collisions in surfaces.txt. You can expand this list with as many elseifs as you need depending on how many collisions you've set up.
 	{
		stroke[0]++
		
		if stroke[0] >= 40
		{
			stroke[0] = 0
			"\0\s[1]Er... %(username)...?\e"
			"\0\s[1]That is my hat?\e"
			"\0\s[1]May I inquire as to what exactly prompted this?\e"
		}
 	}
			
 }

OnMouseLeaveAll //When the mouse is no longer on a hitbox. You can change to OnMouseLeave if you want it to happen when you leave any hitbox for another one
{
	//if stroke[1] > 160 && stroke[1] > pethighscore[0] //Checks if you're in continuous petting, and if you are, if you got a high score.
	//{
		//pethighscore[0] = stroke[1]
		//_b = BalloonCheck
		//if _b == 1 //Checks to see if the balloon is open, and if it is, \C means this will be added onto the previous dialogue.
		//{
			//"\C\n\n(New high score! %(pethighscore[0])!)\e"
		//}
	//}
	//--
	//if stroke[2] > pethighscore[1] //Same thing here, but it's counting the number of successful pets you got. You can use this instead of the stroke count if you like.
	//{
		//pethighscore[1] = stroke[2]
	//}
	//--
	stroke[0] = 0
	stroke[1] = 0
	stroke[2] = 0
}

OnMouseDoubleClick
 {
	//---- like with the OnMouseMove function above, this determines who the user is clicking on.
	if reference5 == 0 //checks which button is being used for the click
	{
	 	if reference3 == 0 //if the character is 0, aka your main character
		{
		MouseDoubleClickSakura
		}
		else
		{
 		MouseDoubleClickKero
		}
	}
 }

 //---- MouseDoubleClickSakura ----------------------------------------------------------
 //Like the petting animation above, this is the reactions they have to being double clicked. These also rely on the collisions you set up in surfaces.txt! This set is specifically for the main character, as indicated by the Sakura in the name again.
 
 //*********************Advanced User Info*******************************
 //As a note, double clicking on a certain area of your ghost doesn't have to be the user hitting them. You could instead set up a collision for a piece of clothing, and then have the character talk about that bit of clothing when it's double clicked, for example. One of Smoker's double clicks gives her a high-five when she's in a certain pose. Maybe double clicking is patting them, or pointing behind them, or tapping them, or any number of things. You can be creative here with how they respond depending on what areas you've set up as collisions!
 
 //If you don't want your character to be hittable at all, you can just delete everything in MouseDoubleClickSakura except OpenSakuraMenu. So it'd look like
 
 //MouseDoubleClickSakura
 //{
 //OpenSakuraMenu
 //}
 
 //That's all there is to it. This method also applies to the secondary character, Kero, below this set.
 //***********************************************************************
 
MouseDoubleClickSakura
 {
 	if reference4 == "Face" //Punching dialogue
	{
		if totalpunches < 1 //If the user has not punched the ghost yet
		{
			"\0(Are you sure you want to punch them in the face?)"
			--
			"\n\n\_q\![*]\q[Yes,FirstPunch] \![*]\q[No!,cancelnodialogue]"
		}
		else //If they've already punched the ghost at least once
		{
			"\0\s[0]That's rude.\e"
			"\0\s[0]It's rude to hit people.\e"
			"\0\s[0]Kindly refrain.\e"
			"\0\s[0]Please do not.\e"
			totalpunches++
		}
	}
	elseif reference4 == "Hat" 
	{
		//Hat knocking off dialogue goes here!
	}
	else //If you're not punching, you must want the menu
	{
		OpenSakuraMenu
	}
 }
 
 Select.FirstPunch //The first time the ghost is punched
{
	"\0\s[1]Ouch???\e"
	totalpunches++
}

 
 //---- MouseDoubleClickKero -----------------------------------------------------------
 //This is just the same as MouseDoubleClickSakura above, except for your secondary character. The same principles apply, including how to make your character unhittable.
 
 


 //*********************Advanced User Info*******************************
 //There are other mouse related functions you could set up much like the above, such as OnMouseDragStart, OnMouseDragEnd, OnMouseWheel, and others which correspond to various things you can do with your mouse. You can probably guess what those functions do just by their names - OnMouseWheel would be if someone spun their mouse wheel over a certain area, for example. If you're interested in these, I'd recommend doing some reading at the CROW-SSP Encyclopedia to get a better idea of them and settle down for some trial and error learning as you try to put them in.
 //***********************************************************************