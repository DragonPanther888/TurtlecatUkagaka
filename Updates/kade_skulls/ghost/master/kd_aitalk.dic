//---------------------------AI Talk--------------------------
//Alright, this is it! The bread and butter of your ghost. This is where all their random conversations are stored. Of all the .dic files, this is the one you will probably be adding stuff to and updating the most as new dialogue comes to your mind. It is relatively simple in that there aren't many functions or real coding involved with this file, but there are a few cool tricks you can do within randomtalk that can make dialogue with interesting effects, so I'll point them out as we go along.
//I'm going to leave a lot of examples of different types of dialogue in here that you can study if the possibilities they present intrigue you. Study them carefully!

//Make sure to read the walkthrough (http://www.ashido.com/ukagaka/) for more details about how to properly format ghost dialogue!
//I will reiterate that you should be editing these in Notepad++, and in particular, you should set the Language to C (or Java I guess) to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//--AiTalk
//Leave this alone.
//Advanced users, this is mostly setting up whether or not dialogue is in a chain before it displays. Again, you can leave it alone unless you want to screw around with chains for some strange reason.

AiTalk
{
	if RAND(100) < communicateratio
 	{
 		StartCommunicate
	}
 	else
	{
 		if ARRAYSIZE(offscreen) == 0
		{
			if CHAIN.IDName == ""
			{
 				lastTalk = RandomTalk
			}
			else
			{
				lastTalk = ChainTalk
			}
			lastTalk
		}
 		else
		{ 
			OffscreenTalk
 		}
	}
}


//nonoverlap means that all possible dialogue candidates will be chosen at least once before any dialogues are repeated. Note that anything within brackets counts as a single dialogue candidate! This causes the probability issues mentioned in the YAYA tips file. I included an example of a dialogue pool here, if you set those up they'll work properly with nonoverlap. Also note, though: if you set up something like different modes, you should give each one it's own function for dialogue! If you have all your dialogues in one big if, nonoverlap won't have any effect.
RandomTalk : nonoverlap
{
	"\0\s[0]\i[2](They're humming softly to themselves.)\e"
	//"\0\s[0]Here's a chain!\e:chain=achain"
	"\0\s[0](They're mumbling to themself.)\n\n[half]\s[1]If today is %(nowday),\w4 then that means...\e"
	"\0\s[0]\i[2](They hum a low tone.)\e"
	"\0\s[0]\i[3](They hum a high tone.)\e"
	"\0\s[0]\i[1]\i[2](They're humming to themselves.)\e"
	"\0\s[3]\i[1](They're humming a gentle tune.)\e"
	"\0\s[3]\i[2](They hum a short, happy tune.)\e"
	
	//This will call the example pool I've set up below. The second argument, %(username != ''), means that this pool will be available so long as the username is not blank. You can put any if check in there! For example: %(month == 2) would make a pool only available in February, while %(nowmode == 'Ultimate Form') would make a pool only available while the nowmode variable is set to "Ultimate Form".
	//parallel Pool("Pool_Example","%(username != '')")
	
	//User Environment Ifs - Use as many of these as you like for dynamic dialogue (Note, if you'd like to make these Pools instead, I've included a file in the 000_Dev_Stuff folder with blank pools.)
	//---Timeslots---
	if timeslot == "earlymorning" //5am - 8am
	{
		if runtime[0] >= 3 //Been open for 3 hours or more, so the user has probably been up all night
		{
			"\0\s[0]\i[1]I'm not usually one to criticize another's sleeping schedule,\w4 so I apologize if this is out of line,\w4\s[1] but perhaps you should consider getting some rest,\w4 %(dearuser)?\e"
		}
		else //Probably just got up
		{
			"\0\s[0]Make sure you get a drink every so often.\w8\i[1]\i[2] It's important to stay hydrated.\e"
		}
	}
	if timeslot == "morning" //9am - 11am
	{
		"\0\s[0]If you are tense,\w4 perhaps you should un-tense.\e"
		
		"\0\s[0]Do not forget to stretch,\w4 %(dearuser).\e"
	}
	if timeslot == "lunch" //12pm - 2pm
	{
		"\0\s[0]It is common for you to eat at around this time,\w4 is it not?\w8 Perhaps you should partake of something,\w4 if you have not already.\e"
		
		"\0\s[0]Have you had something to eat yet today,\w4 %(dearuser)?\e"
		
		"\0\s[0]Don't forget to take breaks every so often,\w4 %(dearuser).\e"
		
		"\0\s[0]\i[3]Don't forget to drink something!\e"
	}
	if timeslot == "afternoon" //3pm - 5pm
	{
		"\0\s[0]Make sure to stretch and move around.\w8\i[2] Staying in one position for an extended period of time is not good for you.\e"
		
		"\0\s[0]Perhaps you should eat something,\w4 if you have not recently?\e"
	}
	if timeslot == "evening" //6pm - 8pm
	{
		"\0\s[0]Have you had a drink recently?\e"
		
		"\0\s[0]Have you had something to eat recently?\e"
	}
	if timeslot == "latenight" //9pm - 12am
	{
		"\0\s[0]Make sure you stay hydrated,\w4 %(dearuser).\e"
		
		"\0\s[0]Don't forget to eat something.\e"
	}
	if timeslot == "midnight" //1am - 4am
	{
		"\0\s[0]\i[2]Mmmmmmm.\w2.\w2.\w8 .\w2.\w2.\s[0]Have you had a drink recently,\w4 %(dearuser)?\e"
		
		"\0\s[0]\i[2]Hmmm.\w2.\w2.\w4\s[0] don't forget to stretch every so often.\e"
		
		"\0\s[0]\i[2]Mmmm.\w8\s[0] You should relax your muscles if you are tense.\e"
	}
	
	//---Days of the week---
	if wd == "Sun"
	{
		
	}
	if wd == "Mon"
	{
		
	}
	if wd == "Tue"
	{
		
	}
	if wd == "Wed"
	{
		
	}
	if wd == "Thu"
	{
		
	}
	if wd == "Fri"
	{
		
	}
	if wd == "Sat"
	{
		
	}
	
	//---Days in the month---
	if day < 5 //4th and before, start of the month
	{
		
	}
	if day > 13 && day < 17 //14th-16th, halfway through
	{
		
	}
	if day > 26 //27th and after, end of the month
	{
		
	}
	
	//---Months---
	if month == 1
	{
		
	}
	if month == 2
	{
		
	}
	if month == 3 //Spring start Northern, Autumn start Southern
	{
		
	}
	if month == 4
	{
		
	}
	if month == 5
	{
		
	}
	if month == 6 //Summer start Northern, Winter start Southern
	{
		
	}
	if month == 7
	{
		
	}
	if month == 8
	{
		
	}
	if month == 9 //Autumn start Northern, Spring start Southern
	{
		
	}
	if month == 10
	{
		
	}
	if month == 11
	{
		
	}
	if month == 12 //Winter start Northern, Summer start Southern
	{
		
	}
	
	//---Seasons---
	if season == "Spring"
	{
		
	}
	if season == "Summer"
	{
		
	}
	if season == "Autumn"
	{
		
	}
	if season == "Winter"
	{
		
	}
	
	//---Noticing and commenting on other ghosts---
	//Remember that you have to check for the sakura name of another ghost, not the ghost name.
	if "Noteworthy" _in_ ghostexlist
	{
		//"\0\s[0]Woo dialogue for my ghost noticing the other ghost I've worked on hurray!!\e"
	}
}


//-----------Pools-----------

//Example of a pool. You can name pools whatever you like. I always start them with Pool_ so that it's clear what they are. They MUST have : array after the function name, or they won't work. I also recommend putting a comment with what if check activates this pool, so it's easy to remember later.
Pool_Example : array //username != ""
{
	"\0\s[0]This is the first dialogue from the pool!\w8\w8 Your username isn't blank,\w4 so all these dialogues are available with equal probability!\e"
	"\0\s[0]This is the second dialogue from the pool!\w8\w8 You wouldn't see these nearly so often if they were just in a plain if check.\e"
	"\0\s[0]This is the third dialogue from the pool!\w8\w8 Putting dialogues in a pool like this means that nonoverlap can affect them properly, so long as nothing else interferes!\e"
	"\0\s[0]This is the fourth dialogue from the pool!\w8\w8 You could nest another pool inside this pool,\w4 and all the dialogues in there would also display with equal probabilities!\e"
	"\0\s[0]This is the fifth dialogue from the pool!\w8\w8 Pools can be placed anywhere,\w4 not just RandomTalk!\e"
}

//-----------Chains-----------

//Example of a chain. The dialogues will play in order each time the ghost talks until it reaches chain=end.
achain
{{CHAIN
	"\0\s[0]Here's another part of the chain!\e"
	"\0\s[0]Here's a third part of the chain!\e"
	"\0\s[0]Here's a fourth part of the chain!\e"
	"\0\s[0]Here's the end of a chain!\e:chain=end"
}}CHAIN


//-----------Timekeeping systems and related dialogue-----------


OnMinuteChange
{
	if minute == 0 //Top of the hour notifications
	{
		if hour == 0
		{
			if day == 1 && month == 1
			{
				"\0\s[0]Happy new year!\e"
			}
			else
			{
				"\0\s[0]It's midnight.\e"
			}
		}
		elseif hour == 12
		{
			"\0\s[0]It's noon.\e"
		}
		else
		{
			"\0\s[0]It's %(hour12) o'clock.\e"
		}
	}
	elseif ARRAYSIZE(offscreen) > 0 //If the ghost is off the screen, it will run the off screen dialogue every minute
 	{
 		OffscreenTalk
	}
	
}

//--OnSecondChange
//Like the above, this handles what happens every time a second goes by. Most of this you will not have to touch.

OnSecondChange
{
	if runtime[2] >= 59
	{
		runtime[2] = 0
		runtime[1]++
		if runtime[1] >= 59
		{
			runtime[1] = 0
			runtime[0]++
			totalhours++
		}
	}
	else
	{
		runtime[2]++
	}
	if reference2 == 1 //This is for if your Sakura and Kero are overlapping. \4 will move the speaking character away from the other character.
	{
		"\0\s[0]Me and %(keroname) are overlapping.\w8 How'd you manage that?\4\e"
	}
}

OnOffscreen
{
	offscreen = IARRAY //Makes offscreen IARRAY if there's no value
	_lastvalue = IARRAY
	if reference0 != ""; offscreen = SPLIT(reference0,",") //An array of the IDs of characters currently off screen. 0 is Sakura, 1 is Kero, etc
	if reference1 != ""; _lastvalue = SPLIT(reference1,",")
	//If a character is currently off the screen, their ID will be in the offscreen array, and you can find it with ASEARCH.
	//reference1 has the values of reference0 from the last time this function ran, so you can use it to tell if a character has been moved back on screen.
	//I've only set this up for the Sakura, but you can copy this format for other characters too. Just change the number in the ASEARCH.
	
	if ASEARCH("0",offscreen) != -1 //Checks if the sakura was moved off screen
	{
		OffscreenTalk
	}
	elseif ASEARCH("0",_lastvalue) != -1 //Checks if the sakura is no longer off screen
	{
		EndOffscreenTalk
	}
}

OffscreenTalk //Off the screen dialogue. Ctrl Shift F12 will bring characters back onto the screen
{
	"\0\s[0]Well, it's certainly, um... interesting, over here.\w8\w8 You can press Ctrl Shift F12 to bring me back.\e"
}

EndOffscreenTalk //Being brought back on the screen.
{
	"\0\s[0]Hmmm.\w8 Thank you, by the way.\e"
}


//**** OnSurfaceRestore *****************************************************************
//OnSurfaceRestore is a handy function. What this does is that after a short period of time, the ghost will go back to its default pose, so you won't have a ghost stuck in one expression for too long. It's also helpful if you've made one of the characters disappear using \s[-1] in dialogue and didn't bring them back at the end of it. This will do that for you.
//I'm going to comment out the if/else statements in this because the circumstances in which they'd come up seem pretty unlikely and unnecessary if you're just going to be making a simple ghost. You can just leave this function alone and move on if you want. However, if you do want to use them, just uncomment the lines by deleting the slashes and fill in the info as you need.

//*********************Advanced User Info*******************************
//You can put if statements in OnSurfaceRestore to make exceptions for certain poses, or to make sure that once they're in a certain pose, they stay in that pose. For example, if you turn my Hunter and Smoker ghost into eggplants, there's a check for the their eggplant pose numbers to make sure they STAY eggplants when OnSurfaceRestore is called.
//You can also use OnSurfaceRestore to clean up things that might be left on the screen, primarily from using p[number]\s[] to call up other objects or characters. Just make sure to add a p[number]\s[-1] to OnSurfaceRestore, and that should get rid of it each time the ghost cleans itself up.
//***********************************************************************

OnSurfaceRestore
 {
 	//if reference0 == 4 || reference0 == 6 //This is checking what poses they are in. This looks to see if Girl is in pose 4 or pose 6, since she is reference0.
 	//{
 	//"\1\s[10]You're in a sad pose.\w8\0\s[0]I'll go back to normal then.\e"
 	//}
 	//elseif reference1 == 14 || reference1 == 16 //This is doing the same but for Triangle, since he's reference1. It looks to see if he's in pose 14 or post 16.
 	//{
 	//"\0\s[0]You look sad.\w8\1\s[10]I'll go back to normal.\e"
 	//}
 	//else
 	//{
	"\0\s[0]\1\s[-1]\e"
	//}
 }

 
 //--OnKeyPress
 //This defines the hotkeys your ghost will use. You can change these to whatever you want, but I don't really know why you would. I'd just leave this alone. Advanced Users can add new hotkeys attached to whatever function if you want.
 
OnKeyPress
{
	if reference0 == "t"
	{
	OnAiTalk
	}
	elseif reference0 == "r"
	{
	OnLastTalk
	}
	elseif reference0 == "f1"
	{
	"\![open,readme]"
	}
}